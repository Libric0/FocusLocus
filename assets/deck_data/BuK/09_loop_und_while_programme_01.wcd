<?xml version="1.0" encoding="UTF-8"?>
<knowledge>
    <knowledgeItem type="mathUniverse" id="loopNotLoopSymbols">
        <namesSingular>
            <name>Zeichen</name>
        </namesSingular>
        <namesPlural>
            <name>Zeichen</name>
        </namesPlural>
        <mathObjects>
            <mathObject id="x_0">$$x_0$$</mathObject>
            <mathObject id="x_1">$$x_1$$</mathObject>
            <mathObject id="x_2">$$x_2$$</mathObject>
            <mathObject id="0">$$0$$</mathObject>
            <mathObject id="1">$$1$$</mathObject>
            <mathObject id=":=">$$:=$$</mathObject>
            <mathObject id="+">$$+$$</mathObject>
            <mathObject id=";">$$;$$</mathObject>
            <mathObject id="LOOP">LOOP</mathObject>
            <mathObject id="DO">DO</mathObject>
            <mathObject id="ENDLOOP">ENDLOOP</mathObject>
            <!-- not in category from 11-->
            <mathObject id="WHILE">WHILE</mathObject>
            <mathObject id="ENDWHILE">ENDWHILE</mathObject>
            <mathObject id="neq">$$\neq$$</mathObject>
            <!-- not in while category from 14-->
            <mathObject id="q_0">$$q_0$$</mathObject>
            <mathObject id="q_1">$$q_1$$</mathObject>
            <mathObject id="overline q">$$\overline q$$</mathObject>
            <mathObject id="2">$$2$$</mathObject>
            <mathObject id="3">$$3$$</mathObject>
            <mathObject id="-">$$-$$</mathObject>
            <mathObject id="&lt;">$$&lt;$$</mathObject>
            <mathObject id="&gt;">$$&gt;$$</mathObject>
            <mathObject id="LOAD">LOAD</mathObject>
            <mathObject id="IF">IF</mathObject>
        </mathObjects>
    </knowledgeItem>
    <knowledgeItem type="knowledgeCategory" id="zeichen in loop">
        <universe>loopNotLoopSymbols</universe>
        <questions>
            <question>Welche Zeichen kommen in LOOP-Befehlen vor?</question>
        </questions>
        <categoryNamesSingular>
            <name>Zeichen in LOOP</name>
        </categoryNamesSingular>
        <categoryNamesPlural>
            <name>Zeichen in LOOP</name>
        </categoryNamesPlural>
        <indicesInCategory>0,1,2,3,4,5,6,7,8,9,10</indicesInCategory>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="zuweisung">
        <topicSingular>LOOP</topicSingular>
        <topicPlural>LOOP-Programme</topicPlural>
        <contentItems>
            <contentItem>Für alle Variablen $$x_i, x_j$$ und jede Konstante $$c\in \{0,1\}$$ ist die Zuweisung $$x_i = x_j$$</contentItem>
            <contentItemCompletable/>
            <contentItem>ein LOOP-Programm namens Zuweisung</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>$$+c$$</fillIn>
            <fillIn>+c</fillIn>
            <fillIn>+ c</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$-c$$</fillIn>
            <fillIn>-c</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="Hintereinanderausfuerung in loop">
        <topicSingular>LOOP</topicSingular>
        <topicPlural>LOOP-Programme</topicPlural>
        <contentItems>
            <contentItem>Die hintereinanderausführung zweier LOOP-Programme $$P_1,P_2$$ wird $$P_1$$</contentItem>
            <contentItemCompletable/>
            <contentItem>$$P_2$$ geschrieben</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>$$;$$</fillIn>
            <fillIn>;</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$:$$</fillIn>
            <fillIn>:</fillIn>
            <fillIn>$$+$$</fillIn>
            <fillIn>+</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="loop konstrukt">
        <topicSingular>LOOP</topicSingular>
        <topicPlural>LOOP-Programma</topicPlural>
        <contentItems>
            <contentItem>Für eine Variable $$x_i$$ und ein LOOP-Programm $$P$$ ist das LOOP-Konstrukt LOOP $$x_i$$</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>DO $$P$$ ENDLOOP</fillIn>
            <fillIn>DO P ENDLOOP</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>DO $$P$$</fillIn>
            <fillIn>$$P$$ ENDLOOP</fillIn>
            <fillIn>DO $$P;$$</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeCategory" id="while befehle">
        <universe>loopNotLoopSymbols</universe>
        <questions>
            <question>Welche Zeichen gehören zu WHILE?</question>
        </questions>
        <categoryNamesSingular>
            <name>Zeichen in WHILE</name>
        </categoryNamesSingular>
        <categoryNamesPlural>
            <name>Zeichen in WHILE</name>
        </categoryNamesPlural>
        <indicesInCategory>0,1,2,3,4,5,6,7,8,9,10,11,12,13</indicesInCategory>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="while konstrukt">
        <topicSingular>WHILE</topicSingular>
        <topicPlural>WHILE-Programme</topicPlural>
        <contentItems>
            <contentItem>Für eine Variable $$x_i$$ und ein WHILE-Programm $$P$$ ist die Schleife</contentItem>
            <contentItemCompletable/>
            <contentItem>$$x_i \neq 0$$ DO $$P$$ ENDWHILE</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>WHILE</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>LOOP</fillIn>
            <fillIn>FOR</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="unterschied loop while">
        <topicSingular>WHILE</topicSingular>
        <topicPlural>WHILE-Programme</topicPlural>
        <contentItems>
            <contentItem>Der Unterschied zwischen LOOP und WHILE ist, dass der Inhalt von LOOP nur</contentItem>
            <contentItemCompletable/>
            <contentItem>oft ausgeführt werden kann</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>endlich</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>unendlich</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="loop programme halten immer">
        <topicSingular>LOOP</topicSingular>
        <topicPlural>LOOP-Programme</topicPlural>
        <contentItems>
            <contentItem>LOOP Programme halten</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>immer</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>nicht immer</fillIn>
            <fillIn>nie</fillIn>
            <fillIn>in Linearer Zeit</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="while programme die nicht halten">
        <topicSingular>WHILE</topicSingular>
        <topicPlural>WHILE-Programme</topicPlural>
        <contentItems>
            <contentItem>Es gibt WHILE-Programme die nicht</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>terminieren</fillIn>
            <fillIn>halten</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>starten</fillIn>
            <fillIn>von TMs simuliert werden können</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="while turing maechtig">
        <topicSingular>WHILE</topicSingular>
        <topicPlural>WHILE-Programme</topicPlural>
        <contentItems>
            <contentItem>Die Programmiersprache WHILE ist</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>Turing-mächtig</fillIn>
            <fillIn>Turing-maechtig</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>Turing-schwer</fillIn>
            <fillIn>nicht Turing-mächtig</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="loop nicht turing maechtig">
        <topicSingular>LOOP</topicSingular>
        <topicPlural>LOOP-Programme</topicPlural>
        <contentItems>
            <contentItem>Die Programmiersprache LOOP ist</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>nicht Turing-mächtig</fillIn>
            <fillIn>nicht Turing-maechtig</fillIn>
            <fillIn>nicht Turing mächtig</fillIn>
            <fillIn>nicht Turing maechtig</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>Turing-schwer</fillIn>
            <fillIn>Turing-mächtig</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeMultipleChoiceTexText" id="beweis while turing maechtig">
        <questions>
            <question>Was passt zum Beweis, dass WHILE Turing-mächtig ist?</question>
        </questions>
        <correctChoices>
            <choice>$$Q = \{q_0,...,q_t\}$$</choice>
            <choice>Startzustand $$q_1$$</choice>
            <choice>Endzustand $$q_0$$</choice>
            <choice>Bandalphabet der TM: $$\Gamma = \{1,2,B\}$$</choice>
            <choice>$$1$$ in der TM ist $$1$$ in WHILE</choice>
            <choice>$$2$$ in der TM ist $$2$$ in WHILE</choice>
            <choice>$$B$$ in der TM ist $$0$$ in WHILE</choice>
            <choice>Das Bandalphabet wird durch natürliche Zahlen kodiert</choice>
            <choice>TM im Zustand $$q_i\Leftrightarrow$$ WHILE-variable hat den Wert $$i$$</choice>
            <choice>WHILE Bedingung: WHILE $$q\neq 0$$</choice>
            <choice>Der Zustand wird in einer eigenen Variable gespeichert</choice>
            <choice>Die Bandzellen vor dem Kopf werden richtig herum in einer eigenen Varible gespeichert</choice>
            <choice>Die TM hält genau dann, wenn die WHILE-Variable den Wert 0 hat</choice>
            <choice>Die Bandzellen hinter dem Kopf werden verkehrt herum in einer eigenen Variable gespeichert</choice>
            <choice>Die Bandzelle unter dem Kopf wird in einer eigenen Variable gespeichert</choice>
        </correctChoices>
        <incorrectChoices>
            <choice>$$Q = \{q_1,...,q_t\}$$</choice>
            <choice>Startzustand $$q_0$$</choice>
            <choice>Endzustand $$q_2$$</choice>
            <choice>Bandalphabet $$\Gamma = \{0,1,B\}$$</choice>
            <choice>Das Bandaphabet wird durch alphabetische Buchstaben kodiert</choice>
            <choice>Die Bandzellen vor dem Kopf werden verkehrt herum in einer eigenen Varible gespeichert</choice>
            <choice>Die Bandzellen hinter dem Kopf werden verkehrt herum in einer eigenen Variable gespeichert</choice>
            <choice>Die Bandzelle unter dem Kopf wird in der selben Variable wie die Bandzellen hinter dem Kopf gespeichert</choice>
        </incorrectChoices>
    </knowledgeItem>
    <!--Ackermann funktion-->
    <knowledgeItem type="knowledgeMultipleChoiceTexText" id="Ackermann funktion def">
        <questions>
            <question>Was passt zur Definition der Ackermann Funktion?</question>
        </questions>
        <correctChoices>
            <choice>$$A(0,n) = n+1$$</choice>
            <choice>$$A(m+1,0) = A(m,1)$$</choice>
            <choice>$$A(m+1,n+1)= A(m,A(m+1,n))$$</choice>
        </correctChoices>
        <incorrectChoices>
            <choice>$$A(0,n) = n$$</choice>
            <choice>$$A(m+1,0) = A(m,0)$$</choice>
            <choice>$$A(m+1,n+1) = A(m+1,A(m,n))$$</choice>
            <choice>$$A(0,n) = 2n$$</choice>
            <choice>$$A(m+1,0) = A(m,m)$$</choice>
            <choice>$$A(m+1,n+1) = A(m,A(m,n))$$</choice>
        </incorrectChoices>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="ackerman funktion def 2">
        <topicSingular>Ackermann Funktion</topicSingular>
        <topicPlural>Definitionen</topicPlural>
        <contentItems>
            <contentItem>$$A(0,n) =$$</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>$$n+1$$</fillIn>
            <fillIn>n+1</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$n$$</fillIn>
            <fillIn>n</fillIn>
            <fillIn>$$2n$$</fillIn>
            <fillIn>2n</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="ackerman funktion def 3">
        <topicSingular>Ackermann Funktion</topicSingular>
        <topicPlural>Definitionen</topicPlural>
        <contentItems>
            <contentItem>$$A($$</contentItem>
            <contentItemCompletable/>
            <contentItem>$$)=n+1$$</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>$$0,n$$</fillIn>
            <fillIn>0,n</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$n+1,0$$</fillIn>
            <fillIn>n+1,0</fillIn>
            <fillIn>$$0,n+1$$</fillIn>
            <fillIn>0,n+1</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="ackerman funktion def 4">
        <topicSingular>Ackermann Funktion</topicSingular>
        <topicPlural>Definitionen</topicPlural>
        <contentItems>
            <contentItem>$$A($$</contentItem>
            <contentItemCompletable/>
            <contentItem>$$)=A(m,1)$$</contentItem>
        </contentItems>
        <correctFillIns>
            <fillIn>$$m+1,0$$</fillIn>
            <fillIn>m+1,0</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$0,m+1$$</fillIn>
            <fillIn>0,m+1</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="ackerman funktion def 5">
        <topicSingular>Ackermann Funktion</topicSingular>
        <topicPlural>Definitionen</topicPlural>
        <contentItems>
            <contentItem>$$A(m+1,0) =$$</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>$$A(m,1)$$</fillIn>
            <fillIn>A(m,1)</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$A(m,0)$$</fillIn>
            <fillIn>A(m,0)</fillIn>
            <fillIn>$$m+1$$</fillIn>
            <fillIn>m+1</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeStatement" id="ackerman funktion def 6">
        <topicSingular>Ackermann Funktion</topicSingular>
        <topicPlural>Definitionen</topicPlural>
        <contentItems>
            <contentItem>$$A(m+1,n+1) =$$</contentItem>
            <contentItemCompletable/>
        </contentItems>
        <correctFillIns>
            <fillIn>$$A(m,A(m+1,n))$$</fillIn>
            <fillIn>A(m,A(m+1,n))</fillIn>
        </correctFillIns>
        <incorrectFillIns>
            <fillIn>$$A(m,A(m,n))$$</fillIn>
            <fillIn>A(m,A(m,n))</fillIn>
            <fillIn>$$A(m+1,A(m,n))$$</fillIn>
            <fillIn>A(m+1,A(m,n))</fillIn>
        </incorrectFillIns>
    </knowledgeItem>
    <knowledgeItem type="knowledgeMultipleChoiceTexText" id="uparrow notation">
        <questions>
            <question>Was gilt für die UpArrow Notation?</question>
        </questions>
        <correctChoices>
            <choice>$$a\uparrow^m 0 =1$$</choice>
            <choice>$$a\uparrow^0 b = a\cdot b$$ für $$b>0$$</choice>
            <choice>$$a \uparrow^1 b = a^b$$ für $$b>0$$</choice>
            <choice>$$a \uparrow^{m} b  = a\uparrow^{m-1}(a \uparrow ^m (b-1))$$ für $$b>0$$ und $$m>1$$</choice>
        </correctChoices>
        <incorrectChoices>
            <choice>$$a \uparrow^m 0 = a$$</choice>
            <choice>$$a\uparrow^0 b = a+ b$$ für $$b>0$$</choice>
            <choice>$$a\uparrow^0 b = a^b$$ für $$b>0$$</choice>
            <choice>$$a \uparrow^1 b = a\cdot b$$ für $$b>0$$</choice>
            <choice>$$a \uparrow^{m} b  = a\uparrow^{m-1}(a \uparrow ^m (b))$$ für $$b>0$$ und $$m>1$$</choice>
            <choice>$$a \uparrow^{m} b  = a\uparrow^{m-1}(a \uparrow ^m (b-1))$$ für $$b\geq0$$ und $$m>1$$</choice>
        </incorrectChoices>
    </knowledgeItem>
    <knowledgeItem type="knowledgeMultipleChoiceTexText" id="ackermann funktion beispiele">
        <questions>
            <question>Was gilt für die Ackermannfunktion $$A(m,n)$$</question>
        </questions>
        <correctChoices>
            <choice>$$A(0,0)=1$$</choice>
            <choice>$$A(1,0)=2$$</choice>
            <choice>$$A(1,n)= n+2$$</choice>
            <choice>$$A(2,n)=2n+3$$</choice>
            <choice>$$A(3,n)=2^{n+3}-3</choice>
            <choice>$$A(m,n)=(2\uparrow^{m-2}(n+3))-3$$</choice>
        </correctChoices>
        <incorrectChoices>
            <choice>$$A(0,0)=0$$</choice>
            <choice>$$A(1,0)=1$$</choice>
            <choice>$$A(1,n)= 2n$$</choice>
            <choice>$$A(2,n)=2n-3$$</choice>
            <choice>$$A(3,n)=2^{n+3}</choice>
            <choice>$$A(m,n)=(2\uparrow^{m-1}(n+3))-3$$</choice>
        </incorrectChoices>
    </knowledgeItem>
</knowledge>